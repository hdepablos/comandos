-- Documentación: https://www.w3resource.com/laravel/eloquent-relationships.php
-- https://laraveldaily.com/eloquent-date-filtering-wheredate-and-other-methods/
-- https://laravel-guide.readthedocs.io/en/latest/pagination/?q=order&check_keywords=yes&area=default
-- https://laravel.com/api/5.8/Illuminate/Database/Eloquent/Builder.html#method_removedScopes
-- https://laravel-guide.readthedocs.io/en/latest/eloquent-relationships/#querying-relations
-- https://www.w3resource.com/laravel/eloquent-relationships.php


-- https://www.amitmerchant.com/attach-detach-sync-laravel/
Importante para la creación 
    attach
Para la actualización
    sync (Es la combinación perfecta de attach / detach
Para eliminar la relación
    detach

-- Data con sus Relaciones
    -- Para que funcione en los modelos deberian de existir
    $lead = $this->lead->with(['customer', 'bank', 'status', 'region', 'history', 'history.status', 'history.user', 'offers', 'userData', 'userData.agent', 'userData.device'])
            ->find($id);

-- Almacenar con la relación 1 registro
  $user->posts()->create([
    'name' => 'informacion',
    'description' => 'Description'
    ]);
-- Almacenar con muchos registros uno a muchos
  $row = $this->terrorist->create($arrTerrorist);
        $row->alias()->createMany($arrAlias);
        $row->documents()->createMany($arrDocuments);
    
-- Almacenar con la relación muchos registro
  $user->posts()->insert($arr);
  
-- Relaciones con multiples tablas
  $documents = DB::table('terrorists')
      ->join('alias', 'alias.terrorist_id', '=', 'terrorists.id')
      ->join('documents', 'documents.terrorist_id', '=', 'terrorists.id')
      ->where('documents.number_doc', 'like', '%' . $document . '%')
      ->select('terrorists.name', 'terrorists.gender', 'alias.alias', 'documents.type_doc', 'documents.number_doc')
      ->get();
      
-- Has
  $data = $this->terrorist::has('documents', '>=', 3)->get();
  
-- SubConsulta
  https://laravel-news.com/eloquent-subquery-enhancements
  
  
$data = $this->terrorist
    ->where('terrorists.name', 'like', '%' . $input['name'] . '%')
    ->where('terrorists.name', 'like', '%' . $input['lastname'] . '%')
    ->with('alias')
    ->with('documents')
    ->whereHas('documents', function ($query) use ($input) {
        $query->where('number_doc',  'like', '%' . $input['document'] . '%');
    })
    ->get();  
    
   -- Seleccionar los post que no tienen comentarios
   $posts = App\Post::doesntHave('comments')->get();
   
    $users = App\User::with(['posts' => function ($query) {
        $query->where('title', 'like', '%first%');
    }])->get();

    $users = App\User::with(['posts' => function ($query) {
        $query->orderBy('created_at', 'desc');
    }])->get();
    
    // Funciona
        // $data = $this->atributte->with(['types'])->find(1);

        // $data = $this->atributte->with(['types' => function ($query) use ($atributte, $value) {
        //     $query->where('name', 'Blancodd');
        // }])->get()->toArray();

        $data = $this->atributte->with('types')
            ->whereHas('types', function ($query) use ($atributte, $value) {
                $query->where($atributte, $value);
            })
            ->get()->toArray();

  
  
  -- relations with field selection
    $data = User::all();
    $data = User::with('providerPrueba')->get();
    $data = User::with('providerPrueba:id,name')->get();
    $data = User::with(['providerPrueba:id,name', 'provider:id'])->get();
    $data = User::with(['providerPrueba:id,name', 'provider:id'])->get();
    
 
 -- Doc: https://stackoverflow.com/questions/19852927/get-specific-columns-using-with-function-in-laravel-eloquent
 -- Opción para seleccionar campos de relaciones
 
   Post::with(['user' => function ($query) {
        $query->select('id','company_id', 'username');
    }, 'user.company' => function ($query) {
        $query->select('id', 'name');
    }])->get();

-- Metodos dinamicos metodos magicos
    -- https://www.youtube.com/watch?v=XwtgZtTTO8A
-- sub consultas
    -- https://www.youtube.com/watch?v=GbYIhsNr2CI

-- Diferencia // 
Empleado.php
public function nomina()
    {
        return $this->belongsTo(Nomina::class,'nomina_id','id'); //ID = el identificador de la tabla de `nominas`
    }
Nomina.php
Y en la tabla `nominas` se pone la función hasOne();
    public function empleado()
    {
        return $this->hasOne(Empleado::class,'nomina_id','id');//ID = el identificador de la tabla de `nominas`
    }
    
relations
return $this->hasOne(Provider::class, 'id', 'provider_id');
return $this->hasMany(VariantProductAtributte::class, 'variant_product_id', 'id')

-- Doc subconsultas 
https://reinink.ca/articles/dynamic-relationships-in-laravel-using-subqueries

-- Pasar variables
-- $query->selectRaw('MATCH(matchy.val) against (?) as relevance ', [$q] )

-- sub consultas
https://laravel-news.com/eloquent-subquery-enhancements
https://reinink.ca/articles

-- Calculo de totales en una misma tabla
https://reinink.ca/articles/calculating-totals-in-laravel-using-conditional-aggregates

$totals = DB::table('subscribers')
    ->selectRaw('count(*) as total')
    ->selectRaw("count(case when status = 'confirmed' then 1 end) as confirmed")
    ->selectRaw("count(case when status = 'unconfirmed' then 1 end) as unconfirmed")
    ->selectRaw("count(case when status = 'cancelled' then 1 end) as cancelled")
    ->selectRaw("count(case when status = 'bounced' then 1 end) as bounced")
    ->first();
    
Para las columnas boolean
$totals = DB::table('subscribers')
    ->selectRaw('count(*) as total')
    ->selectRaw('count(is_admin or null) as admins')
    ->selectRaw('count(is_treasurer or null) as treasurers')
    ->selectRaw('count(is_editor or null) as editors')
    ->selectRaw('count(is_manager or null) as managers')
    ->first();
    
Con filter Para postgressql
$totals = DB::table('subscribers')
    ->selectRaw('count(*) as total')
    ->selectRaw('count(*) filter (where is_admin) as admins')
    ->selectRaw('count(*) filter (where is_treasurer) as treasurers')
    ->selectRaw('count(*) filter (where is_editor) as editors')
    ->selectRaw('count(*) filter (where is_manager) as managers')
    ->first();


-- Ordernar relación uno a uno de forma más eficiente
$users = User::select('users.*')
    ->join('companies', 'companies.user_id', '=', 'users.id')
    ->orderBy('companies.name')
    ->get();
    
    
-- Consultas de mysql en laravel
https://stitcher.io/blog/eloquent-mysql-views
https://nullthoughts.com/development/2019/10/08/dynamic-scope-on-latest-relationship-in-laravel/
https://nullthoughts.com/development/2019/10/09/dynamic-scope-on-latest-relationship-in-laravel-part-2-using-mysql-views/

public function scopeWithPriceCurrent($query)
{
        $subSelect = VariantProductPrice::select('price_variant_product.price_id')
            ->whereColumn([
                ['price_variant_product.variant_product_id', '=', 'variant_product.id']
            ])
            ->latest()
            ->limit(1);
        $query->addSelect([
            'price_id' => $subSelect
        ]);
        $query->with('priceCurrent');
}

-- Eloquent::when(): No More if-elses for Conditional Queries
https://laraveldaily.com/less-know-way-conditional-queries/


https://stackoverflow.com/questions/16815551/how-to-do-this-in-laravel-subquery-where-in
Products::whereIn('id', function($query){
    $query->select('paper_type_id')
    ->from(with(new ProductCategory)->getTable())
    ->whereIn('category_id', ['223', '15'])
    ->where('active', 1);
})->get();

-- Active
return $amount = $this->amount
    ->where('is_active', 1)
    ->where('starts_at', '<=', $this->now)
    ->where(function ($query) {
        $query->where('end_at', '<=', $this->now);
        $query->orWhereNull('end_at');
    })
    ->get();
