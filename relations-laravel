-- DocumentaciÃ³n: https://www.w3resource.com/laravel/eloquent-relationships.php
-- https://laraveldaily.com/eloquent-date-filtering-wheredate-and-other-methods/
-- https://laravel-guide.readthedocs.io/en/latest/pagination/?q=order&check_keywords=yes&area=default
-- https://laravel.com/api/5.8/Illuminate/Database/Eloquent/Builder.html#method_removedScopes
-- https://laravel-guide.readthedocs.io/en/latest/eloquent-relationships/#querying-relations


-- Data con sus Relaciones
    -- Para que funcione en los modelos deberian de existir
    $lead = $this->lead->with(['customer', 'bank', 'status', 'region', 'history', 'history.status', 'history.user', 'offers', 'userData', 'userData.agent', 'userData.device'])
            ->find($id);

-- Almacenar con la relaciÃ³n 1 registro
  $user->posts()->create([
    'name' => 'informacion',
    'description' => 'Description'
    ]);
-- Almacenar con muchos registros uno a muchos
  $row = $this->terrorist->create($arrTerrorist);
        $row->alias()->createMany($arrAlias);
        $row->documents()->createMany($arrDocuments);
    
-- Almacenar con la relaciÃ³n muchos registro
  $user->posts()->insert($arr);
  
-- Relaciones con multiples tablas
  $documents = DB::table('terrorists')
      ->join('alias', 'alias.terrorist_id', '=', 'terrorists.id')
      ->join('documents', 'documents.terrorist_id', '=', 'terrorists.id')
      ->where('documents.number_doc', 'like', '%' . $document . '%')
      ->select('terrorists.name', 'terrorists.gender', 'alias.alias', 'documents.type_doc', 'documents.number_doc')
      ->get();
      
-- Has
  $data = $this->terrorist::has('documents', '>=', 3)->get();
  
-- SubConsulta
  https://laravel-news.com/eloquent-subquery-enhancements
  
  
$data = $this->terrorist
    ->where('terrorists.name', 'like', '%' . $input['name'] . '%')
    ->where('terrorists.name', 'like', '%' . $input['lastname'] . '%')
    ->with('alias')
    ->with('documents')
    ->whereHas('documents', function ($query) use ($input) {
        $query->where('number_doc',  'like', '%' . $input['document'] . '%');
    })
    ->get();  
    
   -- Seleccionar los post que no tienen comentarios
   $posts = App\Post::doesntHave('comments')->get();
   
    $users = App\User::with(['posts' => function ($query) {
        $query->where('title', 'like', '%first%');
    }])->get();

    $users = App\User::with(['posts' => function ($query) {
        $query->orderBy('created_at', 'desc');
    }])->get();
  
  
  -- relations with field selection
    $data = User::all();
    $data = User::with('providerPrueba')->get();
    $data = User::with('providerPrueba:id,name')->get();
    $data = User::with(['providerPrueba:id,name', 'provider:id'])->get();
    $data = User::with(['providerPrueba:id,name', 'provider:id'])->get();

  
  
