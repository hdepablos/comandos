-- Documentación: https://readouble.com/laravel/6.x/en/migrations.html
-- Length
https://stackoverflow.com/questions/29381815/laravel-5-migrations-default-length-of-different-types-in-schematable-method

-- Crear la tabla migraciones en la bd
    php artisan migrate:install
-- Crear el new file de migrations
    php artisan make:migration create_black_list_table
-- Para crear el modelo
    php artisan make:model Models/BlackList
-- Para crear modelo con factory y migrations
    php artisan make:model Models/Post -fm
-- Documentación: https://laravel.com/docs/5.0/schema
-- Estructura 
    $table->bigIncrements('id'); 
    $table->increments('id'); // Recomendado
    $table->('slug',128)->unique();
    $table->integer('user_id')->unsigned();
    $table->enum('status', ['PUBLISHED', 'DRAFT'])->default('DRAFT'); // Enum
    $table->decimal('amount', 12, 2); // Monto
    $table->string('file', 128)->nullable(); // Imagen
    $table->mediumText('excerpt')->nullable();
-- Relacionar eliminar y actualizar en cascade:
    $table->foreign('terrorist_id')->references('id')->on('terrorist')->onDelete('cascade')->onUpdate('cascade');


-- Crear factory
    php artisan make:factory PostFactory
        
        -- Documentación: https://github.com/fzaninotto/Faker
            -- str_slug
            $firstName = $faker->firstName
            $lastName = $faker->lastName
            $faker->unique()->safeEmail
            $faker->phoneNumber
            $faker->sentence(4); // texto de cuatro palabras
            $faker->unique()->word(5); // Palabra unica de cinco caracteres
            'file' => $faker->imageUrl($width = 1200, $heigth = 400),
            'hash' => Str::random(10)
            'email_verified_at' => now(),
            'identity_validated' => random_int(0, 1),

            -- Id aleatorio de una tabla
            $id => App\Customer::all()->random(1)->first()->id,

            -- DNI
            $identification_number = $faker->unique()->numberBetween(95897200, 98899900);
            
            -- CUIL
            $gender = random_int(0, 1); // Genero
            $unique_identifier = (($gender) ? "20" : "27") .  $identification_number . (($gender) ? "2" : "3");
            
            -- Fecha de nacimiento de un año especifico
            $year = rand(1998, 2000);
            $month = rand(1, 12);
            $day = rand(1, 28);
            $birthday = Carbon::create($year, $month, $day, 0, 0, 0);
            
            -- CBU
            $cbu = substr(str_shuffle(str_repeat('0123456789', 5)), 0, 22);

            -- Opciones aleatorias
            $amount = [4000, 8000, 6000, 10000];
            'installment_amount' => $amount[array_rand($amount)],

            -- Conjunto de opciones aleatorias
            $id = random_int(0, 5);
            $montoSolicitado = ["10000","11000", "15000", "25000", "8000"];
            $montoAprobado = ["5000","6000", "10000", "15000", "4000"];
            $montoCuotas = ["2","3", "4", "3", "4"];
            $montoSolicitado = $montoSolicitado[$id];
            $montoAprobado = $montoAprobado[$id];
            $montoCuotas = $montoCuotas[$id];

    -- Ejecutar en cascada
    $factory->afterCreating(App\Customer::class, function ($customer, $faker) {
        $customer->leads()->saveMany(factory(App\Lead::class, 3)->make());
        $customer->loans()->saveMany(factory(App\Loan::class, 2)->make());
    });

-- Ejecutar en tinker
    factory(App\Lead::class)->create(); // 1
    factory(App\Lead::class, 100)->create(); // Many
 
-- Para borrar todas las tablas de la base de datos y luego volverlas a crear:
  	php artisan migrate:refresh
-- Para ejecutar una migrations especifica
    php artisan migrate --path=/database/migrations/my_migration.php 
-- Permite deshacer el último grupo de migraciones ejecutadas
    php artisan migrate:rollback
-- Revertir y migrar la ultima migración
    php artisan migrate:refresh --step=1

-- Modificar crear migrations agregar los cambios
  -- Tamaño
    Schema::table('users', function ($table) {
      $table->string('name', 50)->change();
    });
  
  -- Aceptar null
    Schema::table('users', function (Blueprint $table) {
      $table->string('name', 50)->nullable()->change();
    });
  
  -- Renombrar 
    Schema::table('users', function($table)
    {
        $table->renameColumn('from', 'to');
    });
  
  -- Eliminar una columna
    Schema::table('users', function($table)
    {
        $table->dropColumn('votes');
    });

  -- Eliminar multiples columnas
    Schema::table('users', function($table)
    {
        $table->dropColumn(array('votes', 'avatar', 'location'));
    });
    
    
  -- Modificaciones up agregar down eliminar probar si funciona
    public function up()
    {
        Schema::table($this->table, function (Blueprint $tb) {
            $tb->addColumn('integer', 'nfe_id', ['unsigned' => true, 'length' => 11])->after('indicador_id')->nullable();
            $tb->index('nfe_id');
            $tb->foreign('nfe_id')
                ->references('id')
                ->on('nota_fiscal_eletronica')
                ->onDelete('no action')
                ->onUpdate('no action');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table($this->table, function (Blueprint $tb) {
            $tb->dropForeign('venda_nfe_id_foreign');
            $tb->dropColumn('nfe_id');
        });
    }

  -- Rutas
  https://styde.net/creacion-de-tablas-con-el-sistema-de-migraciones-de-laravel/


-- Crear Seeder
    php artisan make:seeder UserSeeder
-- Ejecutar Seeder and migrations
    php artisan migrate:fresh --seed
-- Ejecutar Seeder filter
    php artisan db:seed --class=DataTestProccessSeeder

    Seeder example file: DataTestProccessSeeder
    
    Para ejecutar varios seeders:
        public function run()
        {
            $this->call([
                BankSeeder::class,
                RegionSeeder::class,
                BranchsBankPatagoniaSeeder::class,
                StatusSeeder::class,
                CompanySeeder::class,
                BankSellerCollectorSeeder::class,
                UserSeeder::class
            ]);
        }
        
    
-- Como volcar un archivo sql a una base de datos por medio de laravel y migraciones
    Crea el file dentro del seeds:
        file.sql
        Creamos el seeder.php
        $sql = database_path('name.file');
        DB:unprepared(file_get_contents($sql));
    
